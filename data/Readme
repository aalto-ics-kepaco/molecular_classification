



<Download Data>
-. Take a look at http://dtp.cancer.gov/index.html to get an overview of the drug screen project.
-. Either process the data with your own scripts or follow the scripts and instruction.
-. The goad here is to better understand the structure of the data source and to validate the processed data.
        -. Go to http://www.ncbi.nlm.nih.gov/pcassay and search with keywords 'DTP/NCI'.
        -. Download the list of cellline AIDs that correspond to the celllines in DTP/NCI project and save AIDs to the file:../DTPNCI2015/otherfiles/pcassay.
        -. For each cell line, download its data file from ftp://ftp.ncbi.nlm.nih.gov/pubchem/Bioassay/CSV/Data/0000001_0001000.zip according to its AID. This will be a zip file covers all cell line data files in DTP/NCI project. 
        -. Each cell line data file will contain a list of compounds with their test activities in this cell line. Take a look at cell line AID-109 (https://pubchem.ncbi.nlm.nih.gov/assay/assay.cgi?aid=109) to have a better understanding of the data.
        -. Parse the cellline data files to extract the data we need which is a m by k matrix of activity scores of m molecules in k celllines.
        -. Save the processed data to the file:./activity_complete.

<Process Data>
-. So far, we have around 40,000 molecules with their activities in about 70 cell lines. There exist two problems with this data matrix in the file:./activity.txt which we should tackle.
-. The first problem is that we still need structural information for molecules, based on which we can measure the similaries with e.g. kernel methods.
        -. The structural information of molecules are in the folder:./molecular_structures, where there are two types of structural information for molecules, namely, SDF files and SMI strings. 
        -. Note that we may not have a complete set of structures. Therefore, we need to filter the activity matrix against the set of molecular structures available in the folder.
-. The second problem is that the activity score matrix in the file:activity_complete is not complete. In other words, there area many entries with missing value. This is problemetic during learning in the later phase.
        -. To tackle the second problem, we will organize the score matrix such that the complete information will appear in the upper left block of the whole matrix.
        -. We are given a set of 60 cancer cell lines in the file:otherfiles/id2aid2names. These cell lines are the ones with additional information e.g. in cell miner (http://discover.nci.nih.gov/cellminer/home.do).
        -. First, we organize the score matrix such that the first 60 columns will correspond to these 60 cell lines, and the rest will follow. In particular, we have column structure as 60 + 13. 
        -. Then we organize the rows of the score matrix such that the first ~4000 rows will correspond to the molecules that have complete data in these 60 cell lines. The rest will follow.
-. We notice that the activity score is computed according -10*log(GI50). We still need binary value as the activity outcome for classification task. According to NCBI, a molecule is 'active' if the activity score is over(>=) 60 and 'inactive' otherwise.

<Compute Kernel>
-. To measure the similaries between molecules and to use kernel based methods, we need to compute the m by m kernel matrix.
-. Kernels which we will be using include Figureprint-Tanimoto kernel.
-. Figureprint-Tanimoto kernel:
        -. The first step is to generate for each molecule a fingerprint vector.
                -. The fingerprints we use are linear fragments upto 7 atoms.
                -. Given a molecular structure in SDF file, this fingerprint can generated by OpenBabel (http://openbabel.org/wiki/Main_Page), see the link for more information. 
                -. We need to generate the fingerprints of around 40,000 molecules. It is important to parallelize the computation in a computer cluster e.g. Triton in Aalto, Ukko in University of Helsinki.
                -. The scripts for fingerprint computation and parallelization can be found from the project folder.
        -. The next step is to compute the Tanimoto kernel based on the fingerprints. 
                -. Tanimoto kernel function is defined on two binary bit vectors. See https://en.wikipedia.org/wiki/Jaccard_index for more information.
                -. As the logic operations on two long bit vectors are not cheap. One might resort to Perl or Bash programming which allows fast processing of the strings. The scripts can be found from project folder.








-. List of preprocessing scripts, in the order of preprocessing:
        # Update activity files of NCI cancer cell lines
        update_ncicancer_actfiles.py

        # Select molecules with arrange the activity score matrix
        update_ncicancer_selections.py
        update_ncicancer_selections.r

        # Compute for each molecule a fingerprint vector
        compute_fingerprint_parallel.py

        # Based on the computed fingerprints, construct Fingerprint-Tanimoto kernel
        compute_fp_feature_matrix.py
        compute_tanimoto_kernel.pl
        complete_tanimoto_kernel_matrix.r
